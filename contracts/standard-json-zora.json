{"language":"Solidity","sources":{"src/CreativeMintManager.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {Ownable2Step} from \"@openzeppelin/contracts/access/Ownable2Step.sol\";\nimport {IZoraCreator1155Factory} from \"@zoralabs/zora-1155-contracts/src/interfaces/IZoraCreator1155Factory.sol\";\nimport {IZoraCreator1155} from \"@zoralabs/zora-1155-contracts/src/interfaces/IZoraCreator1155.sol\";\nimport {ICreatorRoyaltiesControl} from \"@zoralabs/zora-1155-contracts/src/interfaces/ICreatorRoyaltiesControl.sol\";\nimport {ZoraCreator1155Impl} from \"@zoralabs/zora-1155-contracts/src/nft/ZoraCreator1155Impl.sol\";\nimport {ZoraCreator1155FactoryImpl} from \"@zoralabs/zora-1155-contracts/src/factory/ZoraCreator1155FactoryImpl.sol\";\n\ncontract CreativeMintManager is Ownable2Step {\n    error ProjectNotSetup();\n    error CallError(bytes);\n    event MintedNewToken(address indexed user, address indexed target, uint256 indexed tokenId, string media);\n\n    mapping(string => address) public projectTypeContracts;\n    struct MintInfo {\n        address creator;\n        uint256 mintedAt;\n    }\n    // contract -> tokenId -> info\n    mapping(address => mapping(uint256 => MintInfo)) mintInfos;\n\n    address immutable zoraFactory;\n\n    constructor(address _owner, address _zoraFactory) Ownable2Step() {\n        zoraFactory = _zoraFactory;\n        transferOwnership(_owner);\n    }\n\n    function registerProject(\n        string memory projectType,\n        string memory contractURI\n    ) external onlyOwner {\n        bytes[] memory setupActions = new bytes[](1);\n        setupActions[0] = abi.encode(\n            ZoraCreator1155Impl.setFundsRecipient.selector,\n            payable(address(0))\n        );\n\n        ICreatorRoyaltiesControl.RoyaltyConfiguration\n            memory royaltyConfiguration = ICreatorRoyaltiesControl\n                .RoyaltyConfiguration({\n                    royaltyMintSchedule: 0,\n                    royaltyBPS: 0,\n                    royaltyRecipient: address(0)\n                });\n        address newContract = IZoraCreator1155Factory(zoraFactory)\n            .createContract(\n                contractURI,\n                string.concat(projectType, \" [Creative Mint]\"),\n                royaltyConfiguration,\n                payable(address(this)),\n                setupActions\n            );\n        projectTypeContracts[projectType] =  newContract;\n    }\n\n    function mintProject(\n        string memory projectType,\n        string memory tokenURI,\n        uint256 maxSupply\n    ) external {\n        address toMint = projectTypeContracts[projectType];\n        if (toMint == address(0)) {\n            revert ProjectNotSetup();\n        }\n        uint256 newTokenId = IZoraCreator1155(toMint).setupNewToken(\n            tokenURI,\n            maxSupply\n        );\n        IZoraCreator1155(toMint).addPermission(\n            newTokenId,\n            msg.sender,\n            IZoraCreator1155(toMint).PERMISSION_BIT_ADMIN()\n        );\n        IZoraCreator1155(toMint).adminMint(msg.sender, newTokenId, 1, \"\");\n        emit MintedNewToken(msg.sender, toMint, newTokenId, tokenURI);\n    }\n\n    function updateProject(\n        address toMint,\n        bytes memory call\n    ) external onlyOwner {\n        (bool ok, bytes memory err) = toMint.call(call);\n        if (!ok) {\n            revert CallError(err);\n        }\n    }\n}\n"},"node_modules/@openzeppelin/contracts/access/Ownable2Step.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() external {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/interfaces/IZoraCreator1155Factory.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {ICreatorRoyaltiesControl} from \"./ICreatorRoyaltiesControl.sol\";\nimport {IMinter1155} from \"./IMinter1155.sol\";\nimport {IVersionedContract} from \"./IVersionedContract.sol\";\n\n/// @notice Factory for 1155 contracts\n/// @author @iainnash / @tbtstl\ninterface IZoraCreator1155Factory is IVersionedContract {\n    error Constructor_ImplCannotBeZero();\n    error UpgradeToMismatchedContractName(string expected, string actual);\n\n    event FactorySetup();\n    event SetupNewContract(\n        address indexed newContract,\n        address indexed creator,\n        address indexed defaultAdmin,\n        string contractURI,\n        string name,\n        ICreatorRoyaltiesControl.RoyaltyConfiguration defaultRoyaltyConfiguration\n    );\n\n    function createContract(\n        string memory contractURI,\n        string calldata name,\n        ICreatorRoyaltiesControl.RoyaltyConfiguration memory defaultRoyaltyConfiguration,\n        address payable defaultAdmin,\n        bytes[] calldata setupActions\n    ) external returns (address);\n\n    function defaultMinters() external returns (IMinter1155[] memory minters);\n\n    function initialize(address _owner) external;\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/interfaces/IZoraCreator1155.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IERC165Upgradeable} from \"@zoralabs/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC165Upgradeable.sol\";\nimport {IERC1155MetadataURIUpgradeable} from \"@zoralabs/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1155MetadataURIUpgradeable.sol\";\nimport {IZoraCreator1155TypesV1} from \"../nft/IZoraCreator1155TypesV1.sol\";\nimport {IRenderer1155} from \"../interfaces/IRenderer1155.sol\";\nimport {IMinter1155} from \"../interfaces/IMinter1155.sol\";\nimport {IOwnable} from \"../interfaces/IOwnable.sol\";\nimport {IVersionedContract} from \"./IVersionedContract.sol\";\nimport {ICreatorRoyaltiesControl} from \"../interfaces/ICreatorRoyaltiesControl.sol\";\n\n/*\n\n\n             ░░░░░░░░░░░░░░              \n        ░░▒▒░░░░░░░░░░░░░░░░░░░░        \n      ░░▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░      \n    ░░▒▒▒▒░░░░░░░░░░░░░░    ░░░░░░░░    \n   ░▓▓▒▒▒▒░░░░░░░░░░░░        ░░░░░░░    \n  ░▓▓▓▒▒▒▒░░░░░░░░░░░░        ░░░░░░░░  \n  ░▓▓▓▒▒▒▒░░░░░░░░░░░░░░    ░░░░░░░░░░  \n  ░▓▓▓▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░  \n  ░▓▓▓▓▓▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░  \n   ░▓▓▓▓▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░  \n    ░░▓▓▓▓▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░    \n    ░░▓▓▓▓▓▓▒▒▒▒▒▒▒▒░░░░░░░░░▒▒▒▒▒░░    \n      ░░▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░      \n          ░░▓▓▓▓▓▓▓▓▓▓▓▓▒▒░░░          \n\n               OURS TRULY,\n\n */\n\n/// @notice Main interface for the ZoraCreator1155 contract\n/// @author @iainnash / @tbtstl\ninterface IZoraCreator1155 is IZoraCreator1155TypesV1, IVersionedContract, IOwnable, IERC1155MetadataURIUpgradeable {\n    function PERMISSION_BIT_ADMIN() external returns (uint256);\n\n    function PERMISSION_BIT_MINTER() external returns (uint256);\n\n    function PERMISSION_BIT_SALES() external returns (uint256);\n\n    function PERMISSION_BIT_METADATA() external returns (uint256);\n\n    /// @notice Used to label the configuration update type\n    enum ConfigUpdate {\n        OWNER,\n        FUNDS_RECIPIENT,\n        TRANSFER_HOOK\n    }\n    event ConfigUpdated(address indexed updater, ConfigUpdate indexed updateType, ContractConfig newConfig);\n\n    event UpdatedToken(address indexed from, uint256 indexed tokenId, TokenData tokenData);\n    event SetupNewToken(uint256 indexed tokenId, address indexed sender, string newURI, uint256 maxSupply);\n\n    function setOwner(address newOwner) external;\n\n    event ContractRendererUpdated(IRenderer1155 renderer);\n    event ContractMetadataUpdated(address indexed updater, string uri, string name);\n    event Purchased(address indexed sender, address indexed minter, uint256 indexed tokenId, uint256 quantity, uint256 value);\n\n    error TokenIdMismatch(uint256 expected, uint256 actual);\n    error UserMissingRoleForToken(address user, uint256 tokenId, uint256 role);\n\n    error Config_TransferHookNotSupported(address proposedAddress);\n\n    error Mint_InsolventSaleTransfer();\n    error Mint_ValueTransferFail();\n    error Mint_TokenIDMintNotAllowed();\n    error Mint_UnknownCommand();\n\n    error Burn_NotOwnerOrApproved(address operator, address user);\n\n    error NewOwnerNeedsToBeAdmin();\n\n    error Sale_CannotCallNonSalesContract(address targetContract);\n\n    error CallFailed(bytes reason);\n    error Renderer_NotValidRendererContract();\n\n    error ETHWithdrawFailed(address recipient, uint256 amount);\n    error FundsWithdrawInsolvent(uint256 amount, uint256 contractValue);\n\n    error CannotMintMoreTokens(uint256 tokenId, uint256 quantity, uint256 totalMinted, uint256 maxSupply);\n\n    /// @notice Only allow minting one token id at time\n    /// @dev Mint contract function that calls the underlying sales function for commands\n    /// @param minter Address for the minter\n    /// @param tokenId tokenId to mint, set to 0 for new tokenId\n    /// @param quantity to mint\n    /// @param minterArguments calldata for the minter contracts\n    function mint(IMinter1155 minter, uint256 tokenId, uint256 quantity, bytes calldata minterArguments) external payable;\n\n    function adminMint(address recipient, uint256 tokenId, uint256 quantity, bytes memory data) external;\n\n    function adminMintBatch(address recipient, uint256[] memory tokenIds, uint256[] memory quantities, bytes memory data) external;\n\n    function burnBatch(address user, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\n\n    /// @notice Contract call to setupNewToken\n    /// @param tokenURI URI for the token\n    /// @param maxSupply maxSupply for the token, set to 0 for open edition\n    function setupNewToken(string memory tokenURI, uint256 maxSupply) external returns (uint256 tokenId);\n\n    function updateTokenURI(uint256 tokenId, string memory _newURI) external;\n\n    function updateContractMetadata(string memory _newURI, string memory _newName) external;\n\n    // Public interface for `setTokenMetadataRenderer(uint256, address) has been deprecated.\n\n    function contractURI() external view returns (string memory);\n\n    function assumeLastTokenIdMatches(uint256 tokenId) external;\n\n    function updateRoyaltiesForToken(uint256 tokenId, ICreatorRoyaltiesControl.RoyaltyConfiguration memory royaltyConfiguration) external;\n\n    function addPermission(uint256 tokenId, address user, uint256 permissionBits) external;\n\n    function removePermission(uint256 tokenId, address user, uint256 permissionBits) external;\n\n    function isAdminOrRole(address user, uint256 tokenId, uint256 role) external view returns (bool);\n\n    function getTokenInfo(uint256 tokenId) external view returns (TokenData memory);\n\n    function callRenderer(uint256 tokenId, bytes memory data) external;\n\n    function callSale(uint256 tokenId, IMinter1155 salesConfig, bytes memory data) external;\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/interfaces/ICreatorRoyaltiesControl.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IERC2981} from \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\n\ninterface ICreatorRoyaltiesControl is IERC2981 {\n    /// @notice The RoyaltyConfiguration struct is used to store the royalty configuration for a given token.\n    /// @param royaltyMintSchedule Every nth token will go to the royalty recipient.\n    /// @param royaltyBPS The royalty amount in basis points for secondary sales.\n    /// @param royaltyRecipient The address that will receive the royalty payments.\n    struct RoyaltyConfiguration {\n        uint32 royaltyMintSchedule;\n        uint32 royaltyBPS;\n        address royaltyRecipient;\n    }\n\n    /// @notice Thrown when a user tries to have 100% supply royalties\n    error InvalidMintSchedule();\n\n    /// @notice Event emitted when royalties are updated\n    event UpdatedRoyalties(uint256 indexed tokenId, address indexed user, RoyaltyConfiguration configuration);\n\n    /// @notice External data getter to get royalties for a token\n    /// @param tokenId tokenId to get royalties configuration for\n    function getRoyalties(uint256 tokenId) external view returns (RoyaltyConfiguration memory);\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/nft/ZoraCreator1155Impl.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {ERC1155Upgradeable} from \"@zoralabs/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/ERC1155Upgradeable.sol\";\nimport {IERC1155MetadataURIUpgradeable} from \"@zoralabs/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1155MetadataURIUpgradeable.sol\";\nimport {IERC165Upgradeable} from \"@zoralabs/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC165Upgradeable.sol\";\nimport {IZoraCreator1155} from \"../interfaces/IZoraCreator1155.sol\";\nimport {IZoraCreator1155Initializer} from \"../interfaces/IZoraCreator1155Initializer.sol\";\nimport {ReentrancyGuardUpgradeable} from \"@zoralabs/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\";\nimport {UUPSUpgradeable} from \"@zoralabs/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\";\n\nimport {ContractVersionBase} from \"../version/ContractVersionBase.sol\";\nimport {CreatorPermissionControl} from \"../permissions/CreatorPermissionControl.sol\";\nimport {CreatorRendererControl} from \"../renderer/CreatorRendererControl.sol\";\nimport {CreatorRoyaltiesControl} from \"../royalties/CreatorRoyaltiesControl.sol\";\nimport {ICreatorCommands} from \"../interfaces/ICreatorCommands.sol\";\nimport {IMinter1155} from \"../interfaces/IMinter1155.sol\";\nimport {IRenderer1155} from \"../interfaces/IRenderer1155.sol\";\nimport {ITransferHookReceiver} from \"../interfaces/ITransferHookReceiver.sol\";\nimport {IFactoryManagedUpgradeGate} from \"../interfaces/IFactoryManagedUpgradeGate.sol\";\nimport {IZoraCreator1155} from \"../interfaces/IZoraCreator1155.sol\";\nimport {LegacyNamingControl} from \"../legacy-naming/LegacyNamingControl.sol\";\nimport {MintFeeManager} from \"../fee/MintFeeManager.sol\";\nimport {PublicMulticall} from \"../utils/PublicMulticall.sol\";\nimport {SharedBaseConstants} from \"../shared/SharedBaseConstants.sol\";\nimport {TransferHelperUtils} from \"../utils/TransferHelperUtils.sol\";\nimport {ZoraCreator1155StorageV1} from \"./ZoraCreator1155StorageV1.sol\";\n\n/// Imagine. Mint. Enjoy.\n/// @title ZoraCreator1155Impl\n/// @notice The core implementation contract for a creator's 1155 token\n/// @author @iainnash / @tbtstl\ncontract ZoraCreator1155Impl is\n    IZoraCreator1155,\n    IZoraCreator1155Initializer,\n    ContractVersionBase,\n    ReentrancyGuardUpgradeable,\n    PublicMulticall,\n    ERC1155Upgradeable,\n    MintFeeManager,\n    UUPSUpgradeable,\n    CreatorRendererControl,\n    LegacyNamingControl,\n    ZoraCreator1155StorageV1,\n    CreatorPermissionControl,\n    CreatorRoyaltiesControl\n{\n    /// @notice This user role allows for any action to be performed\n    uint256 public constant PERMISSION_BIT_ADMIN = 2 ** 1;\n    /// @notice This user role allows for only mint actions to be performed\n    uint256 public constant PERMISSION_BIT_MINTER = 2 ** 2;\n\n    /// @notice This user role allows for only managing sales configurations\n    uint256 public constant PERMISSION_BIT_SALES = 2 ** 3;\n    /// @notice This user role allows for only managing metadata configuration\n    uint256 public constant PERMISSION_BIT_METADATA = 2 ** 4;\n    /// @notice This user role allows for only withdrawing funds and setting funds withdraw address\n    uint256 public constant PERMISSION_BIT_FUNDS_MANAGER = 2 ** 5;\n    /// @notice Factory contract\n    IFactoryManagedUpgradeGate internal immutable factory;\n\n    constructor(uint256 _mintFeeAmount, address _mintFeeRecipient, address _factory) MintFeeManager(_mintFeeAmount, _mintFeeRecipient) initializer {\n        factory = IFactoryManagedUpgradeGate(_factory);\n    }\n\n    /// @notice Initializes the contract\n    /// @param contractName the legacy on-chain contract name\n    /// @param newContractURI The contract URI\n    /// @param defaultRoyaltyConfiguration The default royalty configuration\n    /// @param defaultAdmin The default admin to manage the token\n    /// @param setupActions The setup actions to run, if any\n    function initialize(\n        string memory contractName,\n        string memory newContractURI,\n        RoyaltyConfiguration memory defaultRoyaltyConfiguration,\n        address payable defaultAdmin,\n        bytes[] calldata setupActions\n    ) external nonReentrant initializer {\n        // We are not initalizing the OZ 1155 implementation\n        // to save contract storage space and runtime\n        // since the only thing affected here is the uri.\n        // __ERC1155_init(\"\");\n\n        // Setup uups\n        __UUPSUpgradeable_init();\n\n        // Setup re-entracy guard\n        __ReentrancyGuard_init();\n\n        // Setup contract-default token ID\n        _setupDefaultToken(defaultAdmin, newContractURI, defaultRoyaltyConfiguration);\n\n        // Set owner to default admin\n        _setOwner(defaultAdmin);\n\n        _setFundsRecipient(defaultAdmin);\n\n        _setName(contractName);\n\n        // Run Setup actions\n        if (setupActions.length > 0) {\n            // Temporarily make sender admin\n            _addPermission(CONTRACT_BASE_ID, msg.sender, PERMISSION_BIT_ADMIN);\n\n            // Make calls\n            multicall(setupActions);\n\n            // Remove admin\n            _removePermission(CONTRACT_BASE_ID, msg.sender, PERMISSION_BIT_ADMIN);\n        }\n    }\n\n    /// @notice sets up the global configuration for the 1155 contract\n    /// @param newContractURI The contract URI\n    /// @param defaultRoyaltyConfiguration The default royalty configuration\n    function _setupDefaultToken(address defaultAdmin, string memory newContractURI, RoyaltyConfiguration memory defaultRoyaltyConfiguration) internal {\n        // Add admin permission to default admin to manage contract\n        _addPermission(CONTRACT_BASE_ID, defaultAdmin, PERMISSION_BIT_ADMIN);\n\n        // Mint token ID 0 / don't allow any user mints\n        _setupNewToken(newContractURI, 0);\n\n        // Update default royalties\n        _updateRoyalties(CONTRACT_BASE_ID, defaultRoyaltyConfiguration);\n    }\n\n    /// @notice Updates the royalty configuration for a token\n    /// @param tokenId The token ID to update\n    /// @param newConfiguration The new royalty configuration\n    function updateRoyaltiesForToken(\n        uint256 tokenId,\n        RoyaltyConfiguration memory newConfiguration\n    ) external onlyAdminOrRole(tokenId, PERMISSION_BIT_FUNDS_MANAGER) {\n        _updateRoyalties(tokenId, newConfiguration);\n    }\n\n    /// @notice remove this function from openzeppelin impl\n    /// @dev This makes this internal function a no-op\n    function _setURI(string memory newuri) internal virtual override {}\n\n    /// @notice This gets the next token in line to be minted when minting linearly (default behavior) and updates the counter\n    function _getAndUpdateNextTokenId() internal returns (uint256) {\n        unchecked {\n            return nextTokenId++;\n        }\n    }\n\n    /// @notice Ensure that the next token ID is correct\n    /// @dev This reverts if the invariant doesn't match. This is used for multicall token id assumptions\n    /// @param lastTokenId The last token ID\n    function assumeLastTokenIdMatches(uint256 lastTokenId) external view {\n        unchecked {\n            if (nextTokenId - 1 != lastTokenId) {\n                revert TokenIdMismatch(lastTokenId, nextTokenId - 1);\n            }\n        }\n    }\n\n    /// @notice Checks if a user either has a role for a token or if they are the admin\n    /// @dev This is an internal function that is called by the external getter and internal functions\n    /// @param user The user to check\n    /// @param tokenId The token ID to check\n    /// @param role The role to check\n    /// @return true or false if the permission exists for the user given the token id\n    function _isAdminOrRole(address user, uint256 tokenId, uint256 role) internal view returns (bool) {\n        return _hasAnyPermission(tokenId, user, PERMISSION_BIT_ADMIN | role);\n    }\n\n    /// @notice Checks if a user either has a role for a token or if they are the admin\n    /// @param user The user to check\n    /// @param tokenId The token ID to check\n    /// @param role The role to check\n    /// @return true or false if the permission exists for the user given the token id\n    function isAdminOrRole(address user, uint256 tokenId, uint256 role) external view returns (bool) {\n        return _isAdminOrRole(user, tokenId, role);\n    }\n\n    /// @notice Checks if the user is an admin for the given tokenId\n    /// @dev This function reverts if the permission does not exist for the given user and tokenId\n    /// @param user user to check\n    /// @param tokenId tokenId to check\n    /// @param role role to check for admin\n    function _requireAdminOrRole(address user, uint256 tokenId, uint256 role) internal view {\n        if (!(_hasAnyPermission(tokenId, user, PERMISSION_BIT_ADMIN | role) || _hasAnyPermission(CONTRACT_BASE_ID, user, PERMISSION_BIT_ADMIN))) {\n            revert UserMissingRoleForToken(user, tokenId, role);\n        }\n    }\n\n    /// @notice Checks if the user is an admin\n    /// @dev This reverts if the user is not an admin for the given token id or contract\n    /// @param user user to check\n    /// @param tokenId tokenId to check\n    function _requireAdmin(address user, uint256 tokenId) internal view {\n        if (!(_hasAnyPermission(tokenId, user, PERMISSION_BIT_ADMIN) || _hasAnyPermission(CONTRACT_BASE_ID, user, PERMISSION_BIT_ADMIN))) {\n            revert UserMissingRoleForToken(user, tokenId, PERMISSION_BIT_ADMIN);\n        }\n    }\n\n    /// @notice Modifier checking if the user is an admin or has a role\n    /// @dev This reverts if the msg.sender is not an admin for the given token id or contract\n    /// @param tokenId tokenId to check\n    /// @param role role to check\n    modifier onlyAdminOrRole(uint256 tokenId, uint256 role) {\n        _requireAdminOrRole(msg.sender, tokenId, role);\n        _;\n    }\n\n    /// @notice Modifier checking if the user is an admin\n    /// @dev This reverts if the msg.sender is not an admin for the given token id or contract\n    /// @param tokenId tokenId to check\n    modifier onlyAdmin(uint256 tokenId) {\n        _requireAdmin(msg.sender, tokenId);\n        _;\n    }\n\n    /// @notice Modifier checking if the requested quantity of tokens can be minted for the tokenId\n    /// @dev This reverts if the number that can be minted is exceeded\n    /// @param tokenId token id to check available allowed quantity\n    /// @param quantity requested to be minted\n    modifier canMintQuantity(uint256 tokenId, uint256 quantity) {\n        _requireCanMintQuantity(tokenId, quantity);\n        _;\n    }\n\n    /// @notice Only from approved address for burn\n    /// @param from address that the tokens will be burned from, validate that this is msg.sender or that msg.sender is approved\n    modifier onlyFromApprovedForBurn(address from) {\n        if (from != msg.sender && !isApprovedForAll(from, msg.sender)) {\n            revert Burn_NotOwnerOrApproved(msg.sender, from);\n        }\n\n        _;\n    }\n\n    /// @notice Checks if a user can mint a quantity of a token\n    /// @dev Reverts if the mint exceeds the allowed quantity (or if the token does not exist)\n    /// @param tokenId The token ID to check\n    /// @param quantity The quantity of tokens to mint to check\n    function _requireCanMintQuantity(uint256 tokenId, uint256 quantity) internal view {\n        TokenData storage tokenInformation = tokens[tokenId];\n        if (tokenInformation.totalMinted + quantity > tokenInformation.maxSupply) {\n            revert CannotMintMoreTokens(tokenId, quantity, tokenInformation.totalMinted, tokenInformation.maxSupply);\n        }\n    }\n\n    /// @notice Set up a new token\n    /// @param newURI The URI for the token\n    /// @param maxSupply The maximum supply of the token\n    function setupNewToken(\n        string memory newURI,\n        uint256 maxSupply\n    ) public onlyAdminOrRole(CONTRACT_BASE_ID, PERMISSION_BIT_MINTER) nonReentrant returns (uint256) {\n        uint256 tokenId = _setupNewToken(newURI, maxSupply);\n        // Allow the token creator to administrate this token\n        _addPermission(tokenId, msg.sender, PERMISSION_BIT_ADMIN);\n        if (bytes(newURI).length > 0) {\n            emit URI(newURI, tokenId);\n        }\n\n        emit SetupNewToken(tokenId, msg.sender, newURI, maxSupply);\n\n        return tokenId;\n    }\n\n    /// @notice Update the token URI for a token\n    /// @param tokenId The token ID to update the URI for\n    /// @param _newURI The new URI\n    function updateTokenURI(uint256 tokenId, string memory _newURI) external onlyAdminOrRole(tokenId, PERMISSION_BIT_METADATA) {\n        if (tokenId == CONTRACT_BASE_ID) {\n            revert();\n        }\n        emit URI(_newURI, tokenId);\n        tokens[tokenId].uri = _newURI;\n    }\n\n    /// @notice Update the global contract metadata\n    /// @param _newURI The new contract URI\n    /// @param _newName The new contract name\n    function updateContractMetadata(string memory _newURI, string memory _newName) external onlyAdminOrRole(0, PERMISSION_BIT_METADATA) {\n        tokens[CONTRACT_BASE_ID].uri = _newURI;\n        _setName(_newName);\n        emit ContractMetadataUpdated(msg.sender, _newURI, _newName);\n    }\n\n    function _setupNewToken(string memory newURI, uint256 maxSupply) internal returns (uint256 tokenId) {\n        tokenId = _getAndUpdateNextTokenId();\n        TokenData memory tokenData = TokenData({uri: newURI, maxSupply: maxSupply, totalMinted: 0});\n        tokens[tokenId] = tokenData;\n        emit UpdatedToken(msg.sender, tokenId, tokenData);\n    }\n\n    /// @notice Add a role to a user for a token\n    /// @param tokenId The token ID to add the role to\n    /// @param user The user to add the role to\n    /// @param permissionBits The permission bit to add\n    function addPermission(uint256 tokenId, address user, uint256 permissionBits) external onlyAdmin(tokenId) {\n        _addPermission(tokenId, user, permissionBits);\n    }\n\n    /// @notice Remove a role from a user for a token\n    /// @param tokenId The token ID to remove the role from\n    /// @param user The user to remove the role from\n    /// @param permissionBits The permission bit to remove\n    function removePermission(uint256 tokenId, address user, uint256 permissionBits) external onlyAdmin(tokenId) {\n        _removePermission(tokenId, user, permissionBits);\n\n        // Clear owner field\n        if (tokenId == CONTRACT_BASE_ID && user == config.owner && !_hasAnyPermission(CONTRACT_BASE_ID, user, PERMISSION_BIT_ADMIN)) {\n            _setOwner(address(0));\n        }\n    }\n\n    /// @notice Set the owner of the contract\n    /// @param newOwner The new owner of the contract\n    function setOwner(address newOwner) external onlyAdmin(CONTRACT_BASE_ID) {\n        if (!_hasAnyPermission(CONTRACT_BASE_ID, newOwner, PERMISSION_BIT_ADMIN)) {\n            revert NewOwnerNeedsToBeAdmin();\n        }\n\n        // Update owner field\n        _setOwner(newOwner);\n    }\n\n    /// @notice Getter for the owner singleton of the contract for outside interfaces\n    /// @return the owner of the contract singleton for compat.\n    function owner() external view returns (address) {\n        return config.owner;\n    }\n\n    /// @notice AdminMint that only checks if the requested quantity can be minted and has a re-entrant guard\n    /// @param recipient recipient for admin minted tokens\n    /// @param tokenId token id to mint\n    /// @param quantity quantity to mint\n    /// @param data callback data as specified by the 1155 spec\n    function _adminMint(address recipient, uint256 tokenId, uint256 quantity, bytes memory data) internal {\n        _mint(recipient, tokenId, quantity, data);\n    }\n\n    /// @notice Mint a token to a user as the admin or minter\n    /// @param recipient The recipient of the token\n    /// @param tokenId The token ID to mint\n    /// @param quantity The quantity of tokens to mint\n    /// @param data The data to pass to the onERC1155Received function\n    function adminMint(\n        address recipient,\n        uint256 tokenId,\n        uint256 quantity,\n        bytes memory data\n    ) external nonReentrant onlyAdminOrRole(tokenId, PERMISSION_BIT_MINTER) {\n        // Call internal admin mint\n        _adminMint(recipient, tokenId, quantity, data);\n    }\n\n    /// @notice Batch mint tokens to a user as the admin or minter\n    /// @param recipient The recipient of the tokens\n    /// @param tokenIds The token IDs to mint\n    /// @param quantities The quantities of tokens to mint\n    /// @param data The data to pass to the onERC1155BatchReceived function\n    function adminMintBatch(address recipient, uint256[] memory tokenIds, uint256[] memory quantities, bytes memory data) external nonReentrant {\n        bool isGlobalAdminOrMinter = _isAdminOrRole(msg.sender, CONTRACT_BASE_ID, PERMISSION_BIT_MINTER);\n\n        for (uint256 i = 0; i < tokenIds.length; ++i) {\n            if (!isGlobalAdminOrMinter) {\n                _requireAdminOrRole(msg.sender, tokenIds[i], PERMISSION_BIT_MINTER);\n            }\n        }\n        _mintBatch(recipient, tokenIds, quantities, data);\n    }\n\n    /// @notice Mint tokens given a minter contract and minter arguments\n    /// @param minter The minter contract to use\n    /// @param tokenId The token ID to mint\n    /// @param quantity The quantity of tokens to mint\n    /// @param minterArguments The arguments to pass to the minter\n    function mint(IMinter1155 minter, uint256 tokenId, uint256 quantity, bytes calldata minterArguments) external payable nonReentrant {\n        // Require admin from the minter to mint\n        _requireAdminOrRole(address(minter), tokenId, PERMISSION_BIT_MINTER);\n\n        // Get value sent and handle mint fee\n        uint256 ethValueSent = _handleFeeAndGetValueSent(quantity);\n\n        // Execute commands returned from minter\n        _executeCommands(minter.requestMint(msg.sender, tokenId, quantity, ethValueSent, minterArguments).commands, ethValueSent, tokenId);\n\n        emit Purchased(msg.sender, address(minter), tokenId, quantity, msg.value);\n    }\n\n    /// @notice Set a metadata renderer for a token\n    /// @param tokenId The token ID to set the renderer for\n    /// @param renderer The renderer to set\n    function setTokenMetadataRenderer(uint256 tokenId, IRenderer1155 renderer) external nonReentrant onlyAdminOrRole(tokenId, PERMISSION_BIT_METADATA) {\n        _setRenderer(tokenId, renderer);\n\n        if (tokenId == 0) {\n            emit ContractRendererUpdated(renderer);\n        } else {\n            // We don't know the uri from the renderer but can emit a notification to the indexer here\n            emit URI(\"\", tokenId);\n        }\n    }\n\n    /// Execute Minter Commands ///\n\n    /// @notice Internal functions to execute commands returned by the minter\n    /// @param commands list of command structs\n    /// @param ethValueSent the ethereum value sent in the mint transaction into the contract\n    /// @param tokenId the token id the user requested to mint (0 if the token id is set by the minter itself across the whole contract)\n    function _executeCommands(ICreatorCommands.Command[] memory commands, uint256 ethValueSent, uint256 tokenId) internal {\n        for (uint256 i = 0; i < commands.length; ++i) {\n            ICreatorCommands.CreatorActions method = commands[i].method;\n            if (method == ICreatorCommands.CreatorActions.SEND_ETH) {\n                (address recipient, uint256 amount) = abi.decode(commands[i].args, (address, uint256));\n                if (ethValueSent > amount) {\n                    revert Mint_InsolventSaleTransfer();\n                }\n                if (!TransferHelperUtils.safeSendETH(recipient, amount, TransferHelperUtils.FUNDS_SEND_NORMAL_GAS_LIMIT)) {\n                    revert Mint_ValueTransferFail();\n                }\n            } else if (method == ICreatorCommands.CreatorActions.MINT) {\n                (address recipient, uint256 mintTokenId, uint256 quantity) = abi.decode(commands[i].args, (address, uint256, uint256));\n                if (tokenId != 0 && mintTokenId != tokenId) {\n                    revert Mint_TokenIDMintNotAllowed();\n                }\n                _mint(recipient, tokenId, quantity, \"\");\n            } else {\n                // no-op\n            }\n        }\n    }\n\n    /// @notice Token info getter\n    /// @param tokenId token id to get info for\n    /// @return TokenData struct returned\n    function getTokenInfo(uint256 tokenId) external view returns (TokenData memory) {\n        return tokens[tokenId];\n    }\n\n    /// @notice Proxy setter for sale contracts (only callable by SALES permission or admin)\n    /// @param tokenId The token ID to call the sale contract with\n    /// @param salesConfig The sales config contract to call\n    /// @param data The data to pass to the sales config contract\n    function callSale(uint256 tokenId, IMinter1155 salesConfig, bytes memory data) external onlyAdminOrRole(tokenId, PERMISSION_BIT_SALES) {\n        _requireAdminOrRole(address(salesConfig), tokenId, PERMISSION_BIT_MINTER);\n        if (!salesConfig.supportsInterface(type(IMinter1155).interfaceId)) {\n            revert Sale_CannotCallNonSalesContract(address(salesConfig));\n        }\n        (bool success, bytes memory why) = address(salesConfig).call(data);\n        if (!success) {\n            revert CallFailed(why);\n        }\n    }\n\n    /// @notice Proxy setter for renderer contracts (only callable by METADATA permission or admin)\n    /// @param tokenId The token ID to call the renderer contract with\n    /// @param data The data to pass to the renderer contract\n    function callRenderer(uint256 tokenId, bytes memory data) external onlyAdminOrRole(tokenId, PERMISSION_BIT_METADATA) {\n        // We assume any renderers set are checked for EIP165 signature during write stage.\n        (bool success, bytes memory why) = address(getCustomRenderer(tokenId)).call(data);\n        if (!success) {\n            revert CallFailed(why);\n        }\n    }\n\n    /// @notice Returns true if the contract implements the interface defined by interfaceId\n    /// @param interfaceId The interface to check for\n    /// @return if the interfaceId is marked as supported\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(CreatorRoyaltiesControl, ERC1155Upgradeable, IERC165Upgradeable) returns (bool) {\n        return super.supportsInterface(interfaceId) || interfaceId == type(IZoraCreator1155).interfaceId || ERC1155Upgradeable.supportsInterface(interfaceId);\n    }\n\n    function _handleSupplyRoyalty(uint256 tokenId, uint256 mintAmount, bytes memory data) internal returns (uint256 totalRoyaltyMints) {\n        uint256 royaltyMintSchedule = royalties[tokenId].royaltyMintSchedule;\n        if (royaltyMintSchedule == 0) {\n            royaltyMintSchedule = royalties[CONTRACT_BASE_ID].royaltyMintSchedule;\n        }\n        if (royaltyMintSchedule == 0) {\n            // If we still have no schedule, return 0 supply royalty.\n            return 0;\n        }\n\n        totalRoyaltyMints = (mintAmount + (tokens[tokenId].totalMinted % royaltyMintSchedule)) / (royaltyMintSchedule - 1);\n\n        if (totalRoyaltyMints > 0) {\n            address royaltyRecipient = royalties[tokenId].royaltyRecipient;\n            if (royaltyRecipient == address(0)) {\n                royaltyRecipient = royalties[CONTRACT_BASE_ID].royaltyRecipient;\n            }\n            // If we have no recipient set, return 0 supply royalty.\n            if (royaltyRecipient == address(0)) {\n                return 0;\n            }\n            super._mint(royaltyRecipient, tokenId, totalRoyaltyMints, data);\n        }\n    }\n\n    /// Generic 1155 function overrides ///\n\n    /// @notice Mint function that 1) checks quantity and 2) handles supply royalty 3) keeps track of allowed tokens\n    /// @param to to mint to\n    /// @param id token id to mint\n    /// @param amount of tokens to mint\n    /// @param data as specified by 1155 standard\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual override {\n        uint256 supplyRoyaltyMints = _handleSupplyRoyalty(id, amount, data);\n        _requireCanMintQuantity(id, amount + supplyRoyaltyMints);\n\n        super._mint(to, id, amount, data);\n        tokens[id].totalMinted += amount + supplyRoyaltyMints;\n    }\n\n    /// @notice Mint batch function that 1) checks quantity and 2) handles supply royalty 3) keeps track of allowed tokens\n    /// @param to to mint to\n    /// @param ids token ids to mint\n    /// @param amounts of tokens to mint\n    /// @param data as specified by 1155 standard\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual override {\n        super._mintBatch(to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 supplyRoyaltyMints = _handleSupplyRoyalty(ids[i], amounts[i], data);\n            _requireCanMintQuantity(ids[i], amounts[i] + supplyRoyaltyMints);\n            tokens[ids[i]].totalMinted += amounts[i] + supplyRoyaltyMints;\n        }\n    }\n\n    /// @notice Burns a batch of tokens\n    /// @dev Only the current owner is allowed to burn\n    /// @param from the user to burn from\n    /// @param tokenIds The token ID to burn\n    /// @param amounts The amount of tokens to burn\n    function burnBatch(address from, uint256[] calldata tokenIds, uint256[] calldata amounts) external {\n        if (from != msg.sender && !isApprovedForAll(from, msg.sender)) {\n            revert Burn_NotOwnerOrApproved(msg.sender, from);\n        }\n\n        _burnBatch(from, tokenIds, amounts);\n    }\n\n    function setTransferHook(ITransferHookReceiver transferHook) external onlyAdmin(CONTRACT_BASE_ID) {\n        if (address(transferHook) != address(0)) {\n            if (!transferHook.supportsInterface(type(ITransferHookReceiver).interfaceId)) {\n                revert Config_TransferHookNotSupported(address(transferHook));\n            }\n        }\n\n        config.transferHook = transferHook;\n        emit ConfigUpdated(msg.sender, ConfigUpdate.TRANSFER_HOOK, config);\n    }\n\n    /// @notice Hook before token transfer that checks for a transfer hook integration\n    /// @param operator operator moving the tokens\n    /// @param from from address\n    /// @param to to address\n    /// @param ids token ids to move\n    /// @param amounts amounts of tokens\n    /// @param data data of tokens\n    function _beforeBatchTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal override {\n        super._beforeBatchTokenTransfer(operator, from, to, ids, amounts, data);\n        if (address(config.transferHook) != address(0)) {\n            config.transferHook.onTokenTransferBatch({target: address(this), operator: operator, from: from, to: to, ids: ids, amounts: amounts, data: data});\n        }\n    }\n\n    /// @notice Returns the URI for the contract\n    function contractURI() external view returns (string memory) {\n        IRenderer1155 customRenderer = getCustomRenderer(CONTRACT_BASE_ID);\n        if (address(customRenderer) != address(0)) {\n            return customRenderer.contractURI();\n        }\n        return uri(0);\n    }\n\n    /// @notice Returns the URI for a token\n    /// @param tokenId The token ID to return the URI for\n    function uri(uint256 tokenId) public view override(ERC1155Upgradeable, IERC1155MetadataURIUpgradeable) returns (string memory) {\n        if (bytes(tokens[tokenId].uri).length > 0) {\n            return tokens[tokenId].uri;\n        }\n        return _render(tokenId);\n    }\n\n    /// @notice Internal setter for contract admin with no access checks\n    /// @param newOwner new owner address\n    function _setOwner(address newOwner) internal {\n        address lastOwner = config.owner;\n        config.owner = newOwner;\n\n        emit OwnershipTransferred(lastOwner, newOwner);\n        emit ConfigUpdated(msg.sender, ConfigUpdate.OWNER, config);\n    }\n\n    /// @notice Set funds recipient address\n    /// @param fundsRecipient new funds recipient address\n    function setFundsRecipient(address payable fundsRecipient) external onlyAdminOrRole(CONTRACT_BASE_ID, PERMISSION_BIT_FUNDS_MANAGER) {\n        config.fundsRecipient = fundsRecipient;\n        emit ConfigUpdated(msg.sender, ConfigUpdate.FUNDS_RECIPIENT, config);\n    }\n\n    /// @notice Internal no-checks set funds recipient address\n    /// @param fundsRecipient new funds recipient address\n    function _setFundsRecipient(address payable fundsRecipient) internal {\n        config.fundsRecipient = fundsRecipient;\n        emit ConfigUpdated(msg.sender, ConfigUpdate.FUNDS_RECIPIENT, config);\n    }\n\n    /// @notice Withdraws all ETH from the contract to the funds recipient address\n    function withdraw() public onlyAdminOrRole(CONTRACT_BASE_ID, PERMISSION_BIT_FUNDS_MANAGER) {\n        uint256 contractValue = address(this).balance;\n        if (!TransferHelperUtils.safeSendETH(config.fundsRecipient, contractValue, TransferHelperUtils.FUNDS_SEND_NORMAL_GAS_LIMIT)) {\n            revert ETHWithdrawFailed(config.fundsRecipient, contractValue);\n        }\n    }\n\n    ///                                                          ///\n    ///                         MANAGER UPGRADE                  ///\n    ///                                                          ///\n\n    /// @notice Ensures the caller is authorized to upgrade the contract\n    /// @dev This function is called in `upgradeTo` & `upgradeToAndCall`\n    /// @param _newImpl The new implementation address\n    function _authorizeUpgrade(address _newImpl) internal view override onlyAdmin(CONTRACT_BASE_ID) {\n        if (!factory.isRegisteredUpgradePath(_getImplementation(), _newImpl)) {\n            revert();\n        }\n    }\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/factory/ZoraCreator1155FactoryImpl.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {Initializable} from \"@zoralabs/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\";\nimport {UUPSUpgradeable} from \"@zoralabs/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\";\nimport {IZoraCreator1155Factory} from \"../interfaces/IZoraCreator1155Factory.sol\";\nimport {IZoraCreator1155Initializer} from \"../interfaces/IZoraCreator1155Initializer.sol\";\nimport {IZoraCreator1155} from \"../interfaces/IZoraCreator1155.sol\";\nimport {ICreatorRoyaltiesControl} from \"../interfaces/ICreatorRoyaltiesControl.sol\";\nimport {IMinter1155} from \"../interfaces/IMinter1155.sol\";\nimport {IContractMetadata} from \"../interfaces/IContractMetadata.sol\";\nimport {Ownable2StepUpgradeable} from \"../utils/ownable/Ownable2StepUpgradeable.sol\";\nimport {FactoryManagedUpgradeGate} from \"../upgrades/FactoryManagedUpgradeGate.sol\";\nimport {Zora1155} from \"../proxies/Zora1155.sol\";\n\nimport {ContractVersionBase} from \"../version/ContractVersionBase.sol\";\n\n/// @title ZoraCreator1155FactoryImpl\n/// @notice Factory contract for creating new ZoraCreator1155 contracts\ncontract ZoraCreator1155FactoryImpl is IZoraCreator1155Factory, ContractVersionBase, FactoryManagedUpgradeGate, UUPSUpgradeable, IContractMetadata {\n    IZoraCreator1155 public immutable implementation;\n\n    IMinter1155 public immutable merkleMinter;\n    IMinter1155 public immutable fixedPriceMinter;\n    IMinter1155 public immutable redeemMinterFactory;\n\n    constructor(IZoraCreator1155 _implementation, IMinter1155 _merkleMinter, IMinter1155 _fixedPriceMinter, IMinter1155 _redeemMinterFactory) initializer {\n        implementation = _implementation;\n        if (address(implementation) == address(0)) {\n            revert Constructor_ImplCannotBeZero();\n        }\n        merkleMinter = _merkleMinter;\n        fixedPriceMinter = _fixedPriceMinter;\n        redeemMinterFactory = _redeemMinterFactory;\n    }\n\n    /// @notice ContractURI for contract information with the strategy\n    function contractURI() external pure returns (string memory) {\n        return \"https://github.com/ourzora/zora-1155-contracts/\";\n    }\n\n    /// @notice The name of the sale strategy\n    function contractName() external pure returns (string memory) {\n        return \"ZORA 1155 Contract Factory\";\n    }\n\n    /// @notice The default minters for new 1155 contracts\n    function defaultMinters() external view returns (IMinter1155[] memory minters) {\n        minters = new IMinter1155[](3);\n        minters[0] = fixedPriceMinter;\n        minters[1] = merkleMinter;\n        minters[2] = redeemMinterFactory;\n    }\n\n    function initialize(address _initialOwner) public initializer {\n        __Ownable_init(_initialOwner);\n        __UUPSUpgradeable_init();\n\n        emit FactorySetup();\n    }\n\n    /// @notice Creates a new ZoraCreator1155 contract\n    /// @param newContractURI The URI for the contract metadata\n    /// @param name The name of the contract\n    /// @param defaultRoyaltyConfiguration The default royalty configuration for the contract\n    /// @param defaultAdmin The default admin for the contract\n    /// @param setupActions The actions to perform on the new contract upon initialization\n    function createContract(\n        string memory newContractURI,\n        string calldata name,\n        ICreatorRoyaltiesControl.RoyaltyConfiguration memory defaultRoyaltyConfiguration,\n        address payable defaultAdmin,\n        bytes[] calldata setupActions\n    ) external returns (address) {\n        address newContract = address(new Zora1155(address(implementation)));\n\n        emit SetupNewContract({\n            newContract: address(newContract),\n            creator: msg.sender,\n            defaultAdmin: defaultAdmin,\n            contractURI: newContractURI,\n            name: name,\n            defaultRoyaltyConfiguration: defaultRoyaltyConfiguration\n        });\n\n        IZoraCreator1155Initializer(newContract).initialize(name, newContractURI, defaultRoyaltyConfiguration, defaultAdmin, setupActions);\n\n        return address(newContract);\n    }\n\n    ///                                                          ///\n    ///                         MANAGER UPGRADE                  ///\n    ///                                                          ///\n\n    /// @notice Ensures the caller is authorized to upgrade the contract\n    /// @dev This function is called in `upgradeTo` & `upgradeToAndCall`\n    /// @param _newImpl The new implementation address\n    function _authorizeUpgrade(address _newImpl) internal override onlyOwner {\n        if (!_equals(IContractMetadata(_newImpl).contractName(), this.contractName())) {\n            revert UpgradeToMismatchedContractName(this.contractName(), IContractMetadata(_newImpl).contractName());\n        }\n    }\n\n    function _equals(string memory a, string memory b) internal pure returns (bool) {\n        return (keccak256(bytes(a)) == keccak256(bytes(b)));\n    }\n}\n"},"node_modules/@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/interfaces/IMinter1155.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IERC165Upgradeable} from \"@zoralabs/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC165Upgradeable.sol\";\nimport {ICreatorCommands} from \"./ICreatorCommands.sol\";\n\n/// @notice Minter standard interface\n/// @dev Minters need to confirm to the ERC165 selector of type(IMinter1155).interfaceId\ninterface IMinter1155 is IERC165Upgradeable {\n    function requestMint(\n        address sender,\n        uint256 tokenId,\n        uint256 quantity,\n        uint256 ethValueSent,\n        bytes calldata minterArguments\n    ) external returns (ICreatorCommands.CommandSet memory commands);\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/interfaces/IVersionedContract.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface IVersionedContract {\n    function contractVersion() external returns (string memory);\n}\n"},"node_modules/@zoralabs/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165Upgradeable.sol\";\n"},"node_modules/@zoralabs/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1155MetadataURIUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\";\n"},"node_modules/@zoralabs/zora-1155-contracts/src/nft/IZoraCreator1155TypesV1.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {ITransferHookReceiver} from \"../interfaces/ITransferHookReceiver.sol\";\n\n/*\n\n\n             ░░░░░░░░░░░░░░              \n        ░░▒▒░░░░░░░░░░░░░░░░░░░░        \n      ░░▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░      \n    ░░▒▒▒▒░░░░░░░░░░░░░░    ░░░░░░░░    \n   ░▓▓▒▒▒▒░░░░░░░░░░░░        ░░░░░░░    \n  ░▓▓▓▒▒▒▒░░░░░░░░░░░░        ░░░░░░░░  \n  ░▓▓▓▒▒▒▒░░░░░░░░░░░░░░    ░░░░░░░░░░  \n  ░▓▓▓▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░  \n  ░▓▓▓▓▓▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░  \n   ░▓▓▓▓▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░  \n    ░░▓▓▓▓▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░    \n    ░░▓▓▓▓▓▓▒▒▒▒▒▒▒▒░░░░░░░░░▒▒▒▒▒░░    \n      ░░▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░      \n          ░░▓▓▓▓▓▓▓▓▓▓▓▓▒▒░░░          \n\n               OURS TRULY,\n\n */\n\n/// Imagine. Mint. Enjoy.\n/// @notice Interface for types used across the ZoraCreator1155 contract\n/// @author @iainnash / @tbtstl\ninterface IZoraCreator1155TypesV1 {\n    /// @notice Used to store individual token data\n    struct TokenData {\n        string uri;\n        uint256 maxSupply;\n        uint256 totalMinted;\n    }\n\n    /// @notice Used to store contract-level configuration\n    struct ContractConfig {\n        address owner;\n        uint96 __gap1;\n        address payable fundsRecipient;\n        uint96 __gap2;\n        ITransferHookReceiver transferHook;\n        uint96 __gap3;\n    }\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/interfaces/IRenderer1155.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IERC165Upgradeable} from \"@zoralabs/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC165Upgradeable.sol\";\n\n/// @dev IERC165 type required\ninterface IRenderer1155 is IERC165Upgradeable {\n    /// @notice Called for assigned tokenId, or when token id is globally set to a renderer\n    /// @dev contract target is assumed to be msg.sender\n    /// @param tokenId token id to get uri for\n    function uri(uint256 tokenId) external view returns (string memory);\n\n    /// @notice Only called for tokenId == 0\n    /// @dev contract target is assumed to be msg.sender\n    function contractURI() external view returns (string memory);\n\n    /// @notice Sets up renderer from contract\n    /// @param initData data to setup renderer with\n    /// @dev contract target is assumed to be msg.sender\n    function setup(bytes memory initData) external;\n\n    // IERC165 type required – set in base helper\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/interfaces/IOwnable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface IOwnable {\n    function owner() external returns (address);\n\n    event OwnershipTransferred(address lastOwner, address newOwner);\n}\n"},"node_modules/@openzeppelin/contracts/interfaces/IERC2981.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"},"node_modules/@zoralabs/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/ERC1155Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// Modifications from OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol):\n// - Revert strings replaced with custom errors\n// - Decoupled hooks \n//   - `_beforeTokenTransfer` --> `_beforeTokenTransfer` & `_beforeBatchTokenTransfer`\n//   - `_afterTokenTransfer` --> `_afterTokenTransfer` & `_afterBatchTokenTransfer`\n// - Minor gas optimizations (eg. array length caching, unchecked loop iteration)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155Upgradeable.sol\";\nimport \"./IERC1155ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC1155MetadataURIUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\nerror ERC1155_ADDRESS_ZERO_IS_NOT_A_VALID_OWNER();\nerror ERC1155_ACCOUNTS_AND_IDS_LENGTH_MISMATCH();\nerror ERC1155_IDS_AND_AMOUNTS_LENGTH_MISMATCH();\nerror ERC1155_CALLER_IS_NOT_TOKEN_OWNER_OR_APPROVED();\nerror ERC1155_TRANSFER_TO_ZERO_ADDRESS();\nerror ERC1155_INSUFFICIENT_BALANCE_FOR_TRANSFER();\nerror ERC1155_MINT_TO_ZERO_ADDRESS();\nerror ERC1155_BURN_FROM_ZERO_ADDRESS();\nerror ERC1155_BURN_AMOUNT_EXCEEDS_BALANCE();\nerror ERC1155_SETTING_APPROVAL_FOR_SELF();\nerror ERC1155_ERC1155RECEIVER_REJECTED_TOKENS();\nerror ERC1155_TRANSFER_TO_NON_ERC1155RECEIVER_IMPLEMENTER();\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\n    using AddressUpgradeable for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\n        __ERC1155_init_unchained(uri_);\n    }\n\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        if (account == address(0)) {\n            revert ERC1155_ADDRESS_ZERO_IS_NOT_A_VALID_OWNER();\n        }\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory ids\n    ) public view virtual override returns (uint256[] memory batchBalances) {\n        uint256 numAccounts = accounts.length;\n\n        if (numAccounts != ids.length) {\n            revert ERC1155_ACCOUNTS_AND_IDS_LENGTH_MISMATCH();\n        }\n\n        batchBalances = new uint256[](numAccounts);\n\n        unchecked {\n            for (uint256 i; i < numAccounts; ++i) {\n                batchBalances[i] = balanceOf(accounts[i], ids[i]);\n            }\n        }\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        if (from != _msgSender() && !isApprovedForAll(from, _msgSender())) {\n            revert ERC1155_CALLER_IS_NOT_TOKEN_OWNER_OR_APPROVED();\n        }\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        if (from != _msgSender() && !isApprovedForAll(from, _msgSender())) {\n            revert ERC1155_CALLER_IS_NOT_TOKEN_OWNER_OR_APPROVED();\n        }\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        if (to == address(0)) {\n            revert ERC1155_TRANSFER_TO_ZERO_ADDRESS();\n        }\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, id, amount, data);\n\n        uint256 fromBalance = _balances[id][from];\n        if (fromBalance < amount) {\n            revert ERC1155_INSUFFICIENT_BALANCE_FOR_TRANSFER();\n        }\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, id, amount, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        uint256 numIds = ids.length;\n\n        if (numIds != amounts.length) {\n            revert ERC1155_ACCOUNTS_AND_IDS_LENGTH_MISMATCH();\n        }\n        if (to == address(0)) {\n            revert ERC1155_TRANSFER_TO_ZERO_ADDRESS();\n        }\n\n        address operator = _msgSender();\n\n        _beforeBatchTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 id;\n        uint256 amount;\n        uint256 fromBalance;\n\n        for (uint256 i; i < numIds; ) {\n            id = ids[i];\n            amount = amounts[i];\n            fromBalance = _balances[id][from];\n\n            if (fromBalance < amount) {\n                revert ERC1155_INSUFFICIENT_BALANCE_FOR_TRANSFER();\n            }\n\n            _balances[id][to] += amount;\n\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n\n                ++i;\n            }\n\n\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterBatchTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\n        if (to == address(0)) {\n            revert ERC1155_MINT_TO_ZERO_ADDRESS();\n        }\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, id, amount, data);\n\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, id, amount, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        if (to == address(0)) {\n            revert ERC1155_MINT_TO_ZERO_ADDRESS();\n        }\n\n        uint256 numIds = ids.length;\n\n        if (numIds != amounts.length) {\n            revert ERC1155_IDS_AND_AMOUNTS_LENGTH_MISMATCH();\n        }\n\n        address operator = _msgSender();\n\n        _beforeBatchTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i; i < numIds; ) {\n            _balances[ids[i]][to] += amounts[i];\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterBatchTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\n        if (from == address(0)) {\n            revert ERC1155_BURN_FROM_ZERO_ADDRESS();\n        }\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), id, amount, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n\n        if (fromBalance < amount) {\n            revert ERC1155_BURN_AMOUNT_EXCEEDS_BALANCE();\n        }\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), id, amount, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\n        if (from == address(0)) {\n            revert ERC1155_BURN_FROM_ZERO_ADDRESS();\n        }\n\n        uint256 numIds = ids.length;\n\n        if (numIds != amounts.length) {\n            revert ERC1155_IDS_AND_AMOUNTS_LENGTH_MISMATCH();\n        }\n\n        address operator = _msgSender();\n\n        _beforeBatchTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 id;\n        uint256 amount;\n        uint256 fromBalance;\n        for (uint256 i; i < numIds; ) {\n            id = ids[i];\n            amount = amounts[i];\n\n            fromBalance = _balances[id][from];\n\n            if (fromBalance < amount) {\n                revert ERC1155_BURN_AMOUNT_EXCEEDS_BALANCE();\n            }\n\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n\n                ++i;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterBatchTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (owner == operator) {\n            revert ERC1155_SETTING_APPROVAL_FOR_SELF();\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before a single token transfer.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual { }\n\n\n    /**\n     * @dev Hook that is called before a batch token transfer.\n     */\n    function _beforeBatchTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a single token transfer.\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a batch token transfer.\n     */\n    function _afterBatchTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\n                    revert ERC1155_ERC1155RECEIVER_REJECTED_TOKENS();\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert ERC1155_TRANSFER_TO_NON_ERC1155RECEIVER_IMPLEMENTER();\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\n                    revert ERC1155_ERC1155RECEIVER_REJECTED_TOKENS();\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert ERC1155_TRANSFER_TO_NON_ERC1155RECEIVER_IMPLEMENTER();\n            }\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[47] private __gap;\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/interfaces/IZoraCreator1155Initializer.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {ICreatorRoyaltiesControl} from \"../interfaces/ICreatorRoyaltiesControl.sol\";\n\ninterface IZoraCreator1155Initializer {\n    function initialize(\n        string memory contractName,\n        string memory newContractURI,\n        ICreatorRoyaltiesControl.RoyaltyConfiguration memory defaultRoyaltyConfiguration,\n        address payable defaultAdmin,\n        bytes[] calldata setupActions\n    ) external;\n}\n"},"node_modules/@zoralabs/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"node_modules/@zoralabs/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\nerror FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL();\nerror FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY();\nerror UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL();\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        if (address(this) == __self) {\n            revert FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL();\n        }\n        if (_getImplementation() != __self) {\n            revert FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY();\n        }\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        if (address(this) != __self) {\n            revert UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL();\n        }\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/version/ContractVersionBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IVersionedContract} from \"../interfaces/IVersionedContract.sol\";\n\n/// @title ContractVersionBase\n/// @notice Base contract for versioning contracts\ncontract ContractVersionBase is IVersionedContract {\n    /// @notice The version of the contract\n    function contractVersion() external pure override returns (string memory) {\n        return \"1.3.1\";\n    }\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/permissions/CreatorPermissionControl.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {CreatorPermissionStorageV1} from \"./CreatorPermissionStorageV1.sol\";\nimport {ICreatorPermissionControl} from \"../interfaces/ICreatorPermissionControl.sol\";\n\n/// Imagine. Mint. Enjoy.\n/// @author @iainnash / @tbtstl\ncontract CreatorPermissionControl is CreatorPermissionStorageV1, ICreatorPermissionControl {\n    /// @notice Check if the user has the given permissions\n    /// @dev if multiple permissions are passed in this checks for all the permissions requested\n    /// @return true or false if all of the passed in permissions apply\n    function _hasPermissions(uint256 tokenId, address user, uint256 permissionBits) internal view returns (bool) {\n        // Does a bitwise and and checks if any of those permissions match\n        return permissions[tokenId][user] & permissionBits == permissionBits;\n    }\n\n    /// @notice Check if the user has any of the given permissions\n    /// @dev if multiple permissions are passed in this checks for any one of those permissions\n    /// @return true or false if any of the passed in permissions apply\n    function _hasAnyPermission(uint256 tokenId, address user, uint256 permissionBits) internal view returns (bool) {\n        // Does a bitwise and and checks if any of those permissions match\n        return permissions[tokenId][user] & permissionBits > 0;\n    }\n\n    /// @return raw permission bits for the given user\n    function getPermissions(uint256 tokenId, address user) external view returns (uint256) {\n        return permissions[tokenId][user];\n    }\n\n    /// @notice addPermission – internal function to add a set of permission bits to a user\n    /// @param tokenId token id to add the permission to (0 indicates contract-wide add)\n    /// @param user user to update permissions for\n    /// @param permissionBits bits to add permissions to\n    function _addPermission(uint256 tokenId, address user, uint256 permissionBits) internal {\n        uint256 tokenPermissions = permissions[tokenId][user];\n        tokenPermissions |= permissionBits;\n        permissions[tokenId][user] = tokenPermissions;\n        emit UpdatedPermissions(tokenId, user, tokenPermissions);\n    }\n\n    /// @notice _clearPermission clear permissions for user\n    /// @param tokenId token id to clear permission from (0 indicates contract-wide action)\n    function _clearPermissions(uint256 tokenId, address user) internal {\n        permissions[tokenId][user] = 0;\n        emit UpdatedPermissions(tokenId, user, 0);\n    }\n\n    /// @notice _removePermission removes permissions for user\n    /// @param tokenId token id to clear permission from (0 indicates contract-wide action)\n    /// @param user user to manage permissions for\n    /// @param permissionBits set of permission bits to remove\n    function _removePermission(uint256 tokenId, address user, uint256 permissionBits) internal {\n        uint256 tokenPermissions = permissions[tokenId][user];\n        tokenPermissions &= ~permissionBits;\n        permissions[tokenId][user] = tokenPermissions;\n        emit UpdatedPermissions(tokenId, user, tokenPermissions);\n    }\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/renderer/CreatorRendererControl.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {CreatorRendererStorageV1} from \"./CreatorRendererStorageV1.sol\";\nimport {IRenderer1155} from \"../interfaces/IRenderer1155.sol\";\nimport {ITransferHookReceiver} from \"../interfaces/ITransferHookReceiver.sol\";\nimport {SharedBaseConstants} from \"../shared/SharedBaseConstants.sol\";\n\n/// @title CreatorRendererControl\n/// @notice Contract for managing the renderer of an 1155 contract\nabstract contract CreatorRendererControl is CreatorRendererStorageV1, SharedBaseConstants {\n    function _setRenderer(uint256 tokenId, IRenderer1155 renderer) internal {\n        customRenderers[tokenId] = renderer;\n        if (address(renderer) != address(0)) {\n            if (!renderer.supportsInterface(type(IRenderer1155).interfaceId)) {\n                revert RendererNotValid(address(renderer));\n            }\n        }\n\n        emit RendererUpdated({tokenId: tokenId, renderer: address(renderer), user: msg.sender});\n    }\n\n    /// @notice Return the renderer for a given token\n    /// @dev Returns address 0 for no results\n    /// @param tokenId The token to get the renderer for\n    function getCustomRenderer(uint256 tokenId) public view returns (IRenderer1155 customRenderer) {\n        customRenderer = customRenderers[tokenId];\n        if (address(customRenderer) == address(0)) {\n            customRenderer = customRenderers[CONTRACT_BASE_ID];\n        }\n    }\n\n    /// @notice Function called to render when an empty tokenURI exists on the contract\n    function _render(uint256 tokenId) internal view returns (string memory) {\n        return getCustomRenderer(tokenId).uri(tokenId);\n    }\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/royalties/CreatorRoyaltiesControl.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {CreatorRoyaltiesStorageV1} from \"./CreatorRoyaltiesStorageV1.sol\";\nimport {ICreatorRoyaltiesControl} from \"../interfaces/ICreatorRoyaltiesControl.sol\";\nimport {SharedBaseConstants} from \"../shared/SharedBaseConstants.sol\";\nimport {IERC2981} from \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\n\n/// Imagine. Mint. Enjoy.\n/// @title CreatorRoyaltiesControl\n/// @author ZORA @iainnash / @tbtstl\n/// @notice Contract for managing the royalties of an 1155 contract\nabstract contract CreatorRoyaltiesControl is CreatorRoyaltiesStorageV1, SharedBaseConstants {\n    uint256 immutable ROYALTY_BPS_TO_PERCENT = 10_000;\n\n    /// @notice The royalty information for a given token.\n    /// @param tokenId The token ID to get the royalty information for.\n    function getRoyalties(uint256 tokenId) public view returns (RoyaltyConfiguration memory) {\n        if (royalties[tokenId].royaltyRecipient != address(0)) {\n            return royalties[tokenId];\n        }\n        // Otherwise, return default.\n        return royalties[CONTRACT_BASE_ID];\n    }\n\n    /// @notice Returns the royalty information for a given token.\n    /// @param tokenId The token ID to get the royalty information for.\n    /// @param salePrice The sale price of the NFT asset specified by tokenId\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view returns (address receiver, uint256 royaltyAmount) {\n        RoyaltyConfiguration memory config = getRoyalties(tokenId);\n        royaltyAmount = (config.royaltyBPS * salePrice) / ROYALTY_BPS_TO_PERCENT;\n        receiver = config.royaltyRecipient;\n    }\n\n    /// @notice Returns the supply royalty information for a given token.\n    /// @param tokenId The token ID to get the royalty information for.\n    /// @param mintAmount The amount of tokens being minted.\n    /// @param totalSupply The total supply of the token,\n    function supplyRoyaltyInfo(uint256 tokenId, uint256 totalSupply, uint256 mintAmount) public view returns (address receiver, uint256 royaltyAmount) {\n        RoyaltyConfiguration memory config = getRoyalties(tokenId);\n        if (config.royaltyMintSchedule == 0) {\n            return (config.royaltyRecipient, 0);\n        }\n        uint256 totalRoyaltyMints = (mintAmount + (totalSupply % config.royaltyMintSchedule)) / (config.royaltyMintSchedule - 1);\n        return (config.royaltyRecipient, totalRoyaltyMints);\n    }\n\n    function _updateRoyalties(uint256 tokenId, RoyaltyConfiguration memory configuration) internal {\n        // Don't allow 100% supply royalties\n        if (configuration.royaltyMintSchedule == 1) {\n            revert InvalidMintSchedule();\n        }\n        // Don't allow setting royalties to burn address\n        if (configuration.royaltyRecipient == address(0) && (configuration.royaltyMintSchedule > 0 || configuration.royaltyBPS > 0)) {\n            revert InvalidMintSchedule();\n        }\n        royalties[tokenId] = configuration;\n\n        emit UpdatedRoyalties(tokenId, msg.sender, configuration);\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId;\n    }\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/interfaces/ICreatorCommands.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice Creator Commands used by minter modules passed back to the main modules\ninterface ICreatorCommands {\n    /// @notice This enum is used to define supported creator action types.\n    /// This can change in the future\n    enum CreatorActions {\n        // No operation - also the default for mintings that may not return a command\n        NO_OP,\n        // Send ether\n        SEND_ETH,\n        // Mint operation\n        MINT\n    }\n\n    /// @notice This command is for\n    struct Command {\n        // Method for operation\n        CreatorActions method;\n        // Arguments used for this operation\n        bytes args;\n    }\n\n    /// @notice This command set is returned from the minter back to the user\n    struct CommandSet {\n        Command[] commands;\n        uint256 at;\n    }\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/interfaces/ITransferHookReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IERC165Upgradeable} from \"@zoralabs/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC165Upgradeable.sol\";\n\ninterface ITransferHookReceiver is IERC165Upgradeable {\n    /// @notice Token transfer batch callback\n    /// @param target target contract for transfer\n    /// @param operator operator address for transfer\n    /// @param from user address for amount transferred\n    /// @param to user address for amount transferred\n    /// @param ids list of token ids transferred\n    /// @param amounts list of values transferred\n    /// @param data data as perscribed by 1155 standard\n    function onTokenTransferBatch(\n        address target,\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) external;\n\n    // IERC165 type required\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/interfaces/IFactoryManagedUpgradeGate.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice Factory Upgrade Gate Admin Factory Implementation – Allows specific contract upgrades as a safety measure\ninterface IFactoryManagedUpgradeGate {\n    /// @notice If an implementation is registered by the Builder DAO as an optional upgrade\n    /// @param baseImpl The base implementation address\n    /// @param upgradeImpl The upgrade implementation address\n    function isRegisteredUpgradePath(address baseImpl, address upgradeImpl) external view returns (bool);\n\n    /// @notice Called by the Builder DAO to offer implementation upgrades for created DAOs\n    /// @param baseImpls The base implementation addresses\n    /// @param upgradeImpl The upgrade implementation address\n    function registerUpgradePath(address[] memory baseImpls, address upgradeImpl) external;\n\n    /// @notice Called by the Builder DAO to remove an upgrade\n    /// @param baseImpl The base implementation address\n    /// @param upgradeImpl The upgrade implementation address\n    function removeUpgradePath(address baseImpl, address upgradeImpl) external;\n\n    event UpgradeRegistered(address indexed baseImpl, address indexed upgradeImpl);\n    event UpgradeRemoved(address indexed baseImpl, address indexed upgradeImpl);\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/legacy-naming/LegacyNamingControl.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {ILegacyNaming} from \"../interfaces/ILegacyNaming.sol\";\nimport {LegacyNamingStorageV1} from \"./LegacyNamingStorageV1.sol\";\n\n/// @title LegacyNamingControl\n/// @notice Contract for managing the name and symbol of an 1155 contract in the legacy naming scheme\ncontract LegacyNamingControl is LegacyNamingStorageV1, ILegacyNaming {\n    /// @notice The name of the contract\n    function name() external view returns (string memory) {\n        return _name;\n    }\n\n    /// @notice The token symbol of the contract\n    function symbol() external pure returns (string memory) {}\n\n    function _setName(string memory _newName) internal {\n        _name = _newName;\n    }\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/fee/MintFeeManager.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {TransferHelperUtils} from \"../utils/TransferHelperUtils.sol\";\nimport {IMintFeeManager} from \"../interfaces/IMintFeeManager.sol\";\n\n/// @title MintFeeManager\n/// @notice Manages mint fees for an 1155 contract\ncontract MintFeeManager is IMintFeeManager {\n    uint256 public immutable mintFee;\n    address public immutable mintFeeRecipient;\n\n    constructor(uint256 _mintFee, address _mintFeeRecipient) {\n        // Set fixed finders fee\n        if (_mintFee >= 0.1 ether) {\n            revert MintFeeCannotBeMoreThanZeroPointOneETH(_mintFee);\n        }\n        if (_mintFeeRecipient == address(0) && _mintFee > 0) {\n            revert CannotSetMintFeeToZeroAddress();\n        }\n        mintFeeRecipient = _mintFeeRecipient;\n        mintFee = _mintFee;\n    }\n\n    /// @notice Sends the mint fee to the mint fee recipient and returns the amount of ETH remaining that can be used in this transaction\n    /// @param _quantity The amount of toknens being minted\n    function _handleFeeAndGetValueSent(uint256 _quantity) internal returns (uint256 ethValueSent) {\n        ethValueSent = msg.value;\n\n        // Handle mint fee\n        if (mintFeeRecipient != address(0)) {\n            uint256 totalFee = mintFee * _quantity;\n            ethValueSent -= totalFee;\n            if (!TransferHelperUtils.safeSendETH(mintFeeRecipient, totalFee, TransferHelperUtils.FUNDS_SEND_LOW_GAS_LIMIT)) {\n                revert CannotSendMintFee(mintFeeRecipient, totalFee);\n            }\n        }\n    }\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/utils/PublicMulticall.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n/// @title PublicMulticall\n/// @notice Contract for executing a batch of function calls on this contract\nabstract contract PublicMulticall {\n    /**\n     * @notice Receives and executes a batch of function calls on this contract.\n     */\n    function multicall(bytes[] calldata data) public virtual returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\n        }\n    }\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/shared/SharedBaseConstants.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ncontract SharedBaseConstants {\n    uint256 public constant CONTRACT_BASE_ID = 0;\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/utils/TransferHelperUtils.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @title TransferHelperUtils\n/// @notice Helper functions for sending ETH\nlibrary TransferHelperUtils {\n    /// @dev Gas limit to send funds\n    uint256 internal constant FUNDS_SEND_LOW_GAS_LIMIT = 110_000;\n\n    // @dev Gas limit to send funds – usable for splits, can use with withdraws\n    uint256 internal constant FUNDS_SEND_NORMAL_GAS_LIMIT = 310_000;\n\n    /// @notice Sends ETH to a recipient, making conservative estimates to not run out of gas\n    /// @param recipient The address to send ETH to\n    /// @param value The amount of ETH to send\n    function safeSendETH(address recipient, uint256 value, uint256 gasLimit) internal returns (bool success) {\n        (success, ) = recipient.call{value: value, gas: gasLimit}(\"\");\n    }\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/nft/ZoraCreator1155StorageV1.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IZoraCreator1155TypesV1} from \"./IZoraCreator1155TypesV1.sol\";\n\n/*\n\n\n             ░░░░░░░░░░░░░░              \n        ░░▒▒░░░░░░░░░░░░░░░░░░░░        \n      ░░▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░      \n    ░░▒▒▒▒░░░░░░░░░░░░░░    ░░░░░░░░    \n   ░▓▓▒▒▒▒░░░░░░░░░░░░        ░░░░░░░    \n  ░▓▓▓▒▒▒▒░░░░░░░░░░░░        ░░░░░░░░  \n  ░▓▓▓▒▒▒▒░░░░░░░░░░░░░░    ░░░░░░░░░░  \n  ░▓▓▓▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░  \n  ░▓▓▓▓▓▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░  \n   ░▓▓▓▓▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░  \n    ░░▓▓▓▓▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░    \n    ░░▓▓▓▓▓▓▒▒▒▒▒▒▒▒░░░░░░░░░▒▒▒▒▒░░    \n      ░░▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░      \n          ░░▓▓▓▓▓▓▓▓▓▓▓▓▒▒░░░          \n\n               OURS TRULY,\n\n\n    github.com/ourzora/zora-1155-contracts\n\n */\n\n/// Imagine. Mint. Enjoy.\n/// @notice Storage for 1155 contract\n/// @author @iainnash / @tbtstl\ncontract ZoraCreator1155StorageV1 is IZoraCreator1155TypesV1 {\n    /// @notice token data stored for each token\n    mapping(uint256 => TokenData) internal tokens;\n\n    /// @notice metadata renderer contract for each token\n    mapping(uint256 => address) public metadataRendererContract;\n\n    /// @notice next token id available when using a linear mint style (default for launch)\n    uint256 public nextTokenId;\n\n    /// @notice Global contract configuration\n    ContractConfig public config;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"node_modules/@zoralabs/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\nerror INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED();\nerror INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING();\nerror INITIALIZABLE_CONTRACT_IS_INITIALIZING();\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        if ((!isTopLevelCall || _initialized != 0) && (AddressUpgradeable.isContract(address(this)) || _initialized != 1)) {\n            revert INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED();\n        }\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        if (_initializing || _initialized >= version) {\n            revert INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED();\n        }\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        if (!_initializing) {\n            revert INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING();\n        }\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        if (_initializing) {\n            revert INITIALIZABLE_CONTRACT_IS_INITIALIZING();\n        }\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/interfaces/IContractMetadata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface IContractMetadata {\n    /// @notice Contract name returns the pretty contract name\n    function contractName() external returns (string memory);\n\n    /// @notice Contract URI returns the uri for more information about the given contract\n    function contractURI() external returns (string memory);\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/utils/ownable/Ownable2StepUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IOwnable2StepUpgradeable} from \"./IOwnable2StepUpgradeable.sol\";\nimport {IOwnable2StepStorageV1} from \"./IOwnable2StepStorageV1.sol\";\nimport {Initializable} from \"@zoralabs/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\";\n\n/// @title Ownable\n/// @author Rohan Kulkarni / Iain Nash\n/// @notice Modified from OpenZeppelin Contracts v4.7.3 (access/OwnableUpgradeable.sol)\n/// - Uses custom errors declared in IOwnable\n/// - Adds optional two-step ownership transfer (`safeTransferOwnership` + `acceptOwnership`)\nabstract contract Ownable2StepUpgradeable is IOwnable2StepUpgradeable, IOwnable2StepStorageV1, Initializable {\n    ///                                                          ///\n    ///                            STORAGE                       ///\n    ///                                                          ///\n\n    /// @dev Modifier to check if the address argument is the zero/burn address\n    modifier notZeroAddress(address check) {\n        if (check == address(0)) {\n            revert OWNER_CANNOT_BE_ZERO_ADDRESS();\n        }\n        _;\n    }\n\n    ///                                                          ///\n    ///                           MODIFIERS                      ///\n    ///                                                          ///\n\n    /// @dev Ensures the caller is the owner\n    modifier onlyOwner() {\n        if (msg.sender != _owner) {\n            revert ONLY_OWNER();\n        }\n        _;\n    }\n\n    /// @dev Ensures the caller is the pending owner\n    modifier onlyPendingOwner() {\n        if (msg.sender != _pendingOwner) {\n            revert ONLY_PENDING_OWNER();\n        }\n        _;\n    }\n\n    ///                                                          ///\n    ///                           FUNCTIONS                      ///\n    ///                                                          ///\n\n    /// @dev Initializes contract ownership\n    /// @param _initialOwner The initial owner address\n    function __Ownable_init(address _initialOwner) internal notZeroAddress(_initialOwner) onlyInitializing {\n        _owner = _initialOwner;\n\n        emit OwnerUpdated(address(0), _initialOwner);\n    }\n\n    /// @notice The address of the owner\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /// @notice The address of the pending owner\n    function pendingOwner() public view returns (address) {\n        return _pendingOwner;\n    }\n\n    /// @notice Forces an ownership transfer from the last owner\n    /// @param _newOwner The new owner address\n    function transferOwnership(address _newOwner) public notZeroAddress(_newOwner) onlyOwner {\n        _transferOwnership(_newOwner);\n    }\n\n    /// @notice Forces an ownership transfer from any sender\n    /// @param _newOwner New owner to transfer contract to\n    /// @dev Ensure is called only from trusted internal code, no access control checks.\n    function _transferOwnership(address _newOwner) internal {\n        emit OwnerUpdated(_owner, _newOwner);\n\n        _owner = _newOwner;\n\n        if (_pendingOwner != address(0)) {\n            delete _pendingOwner;\n        }\n    }\n\n    /// @notice Initiates a two-step ownership transfer\n    /// @param _newOwner The new owner address\n    function safeTransferOwnership(address _newOwner) public notZeroAddress(_newOwner) onlyOwner {\n        _pendingOwner = _newOwner;\n\n        emit OwnerPending(_owner, _newOwner);\n    }\n\n    /// @notice Resign ownership of contract\n    /// @dev only callably by the owner, dangerous call.\n    function resignOwnership() public onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /// @notice Accepts an ownership transfer\n    function acceptOwnership() public onlyPendingOwner {\n        emit OwnerUpdated(_owner, msg.sender);\n\n        _transferOwnership(msg.sender);\n    }\n\n    /// @notice Cancels a pending ownership transfer\n    function cancelOwnershipTransfer() public onlyOwner {\n        emit OwnerCanceled(_owner, _pendingOwner);\n\n        delete _pendingOwner;\n    }\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/upgrades/FactoryManagedUpgradeGate.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IFactoryManagedUpgradeGate} from \"../interfaces/IFactoryManagedUpgradeGate.sol\";\nimport {Ownable2StepUpgradeable} from \"../utils/ownable/Ownable2StepUpgradeable.sol\";\nimport {FactoryManagedUpgradeGateStorageV1} from \"./FactoryManagedUpgradeGateStorageV1.sol\";\n\n/// @title FactoryManagedUpgradeGate\n/// @notice Contract for managing upgrades and safe upgrade paths for 1155 contracts\nabstract contract FactoryManagedUpgradeGate is IFactoryManagedUpgradeGate, Ownable2StepUpgradeable, FactoryManagedUpgradeGateStorageV1 {\n    ///                                                          ///\n    ///                CREATOR TOKEN UPGRADES                    ///\n    ///                                                          ///\n\n    /// @notice If an implementation is registered by the Builder DAO as an optional upgrade\n    /// @param baseImpl The base implementation address\n    /// @param upgradeImpl The upgrade implementation address\n    function isRegisteredUpgradePath(address baseImpl, address upgradeImpl) public view returns (bool) {\n        return isAllowedUpgrade[baseImpl][upgradeImpl];\n    }\n\n    /// @notice Called by the Builder DAO to offer implementation upgrades for created DAOs\n    /// @param baseImpls The base implementation addresses\n    /// @param upgradeImpl The upgrade implementation address\n    function registerUpgradePath(address[] memory baseImpls, address upgradeImpl) public onlyOwner {\n        unchecked {\n            for (uint256 i = 0; i < baseImpls.length; ++i) {\n                isAllowedUpgrade[baseImpls[i]][upgradeImpl] = true;\n                emit UpgradeRegistered(baseImpls[i], upgradeImpl);\n            }\n        }\n    }\n\n    /// @notice Called by the Builder DAO to remove an upgrade\n    /// @param baseImpl The base implementation address\n    /// @param upgradeImpl The upgrade implementation address\n    function removeUpgradePath(address baseImpl, address upgradeImpl) public onlyOwner {\n        delete isAllowedUpgrade[baseImpl][upgradeImpl];\n\n        emit UpgradeRemoved(baseImpl, upgradeImpl);\n    }\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/proxies/Zora1155.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {Enjoy} from \"_imagine/mint/Enjoy.sol\";\nimport {ERC1967Proxy} from \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\n\n/*\n\n\n             ░░░░░░░░░░░░░░              \n        ░░▒▒░░░░░░░░░░░░░░░░░░░░        \n      ░░▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░      \n    ░░▒▒▒▒░░░░░░░░░░░░░░    ░░░░░░░░    \n   ░▓▓▒▒▒▒░░░░░░░░░░░░        ░░░░░░░    \n  ░▓▓▓▒▒▒▒░░░░░░░░░░░░        ░░░░░░░░  \n  ░▓▓▓▒▒▒▒░░░░░░░░░░░░░░    ░░░░░░░░░░  \n  ░▓▓▓▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░  \n  ░▓▓▓▓▓▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░  \n   ░▓▓▓▓▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░  \n    ░░▓▓▓▓▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░    \n    ░░▓▓▓▓▓▓▒▒▒▒▒▒▒▒░░░░░░░░░▒▒▒▒▒░░    \n      ░░▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░      \n          ░░▓▓▓▓▓▓▓▓▓▓▓▓▒▒░░░          \n\n               OURS TRULY,\n\n\n */\n\n/// Imagine. Mint. Enjoy.\n/// @notice Imagine. Mint. Enjoy.\n/// @author ZORA @iainnash / @tbtstl\ncontract Zora1155 is Enjoy, ERC1967Proxy {\n    constructor(address _logic) ERC1967Proxy(_logic, \"\") {}\n}\n"},"node_modules/@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"node_modules/@zoralabs/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"node_modules/@zoralabs/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Upgradeable.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"},"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"node_modules/@zoralabs/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/IERC1155Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"},"node_modules/@zoralabs/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/IERC1155ReceiverUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"node_modules/@zoralabs/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n\nerror ADDRESS_INSUFFICIENT_BALANCE();\nerror ADDRESS_UNABLE_TO_SEND_VALUE();\nerror ADDRESS_LOW_LEVEL_CALL_FAILED();\nerror ADDRESS_LOW_LEVEL_CALL_WITH_VALUE_FAILED();\nerror ADDRESS_INSUFFICIENT_BALANCE_FOR_CALL();\nerror ADDRESS_LOW_LEVEL_STATIC_CALL_FAILED();\nerror ADDRESS_CALL_TO_NON_CONTRACT();\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance > amount) {\n            revert ADDRESS_INSUFFICIENT_BALANCE();\n        }\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert ADDRESS_UNABLE_TO_SEND_VALUE();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert ADDRESS_INSUFFICIENT_BALANCE();\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                if (!isContract(target)) {\n                    revert ADDRESS_CALL_TO_NON_CONTRACT();\n                }\n            }\n            return returndata;\n        } else {\n            _revert(returndata);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata);\n        }\n    }\n\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert ADDRESS_LOW_LEVEL_CALL_FAILED();\n        }\n    }\n}\n"},"node_modules/@zoralabs/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"node_modules/@zoralabs/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"node_modules/@zoralabs/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"},"node_modules/@zoralabs/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\nerror ERC1967_NEW_IMPL_NOT_CONTRACT();\nerror ERC1967_UNSUPPORTED_PROXIABLEUUID();\nerror ERC1967_NEW_IMPL_NOT_UUPS();\nerror ERC1967_NEW_ADMIN_IS_ZERO_ADDRESS();\nerror ERC1967_NEW_BEACON_IS_NOT_CONTRACT();\nerror ERC1967_BEACON_IMPL_IS_NOT_CONTRACT();\nerror ADDRESS_DELEGATECALL_TO_NON_CONTRACT();\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        if (!AddressUpgradeable.isContract(newImplementation)) {\n            revert ERC1967_NEW_IMPL_NOT_CONTRACT();\n        } \n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                if (slot != _IMPLEMENTATION_SLOT) {\n                    revert ERC1967_UNSUPPORTED_PROXIABLEUUID();\n                }\n            } catch {\n                revert ERC1967_NEW_IMPL_NOT_UUPS();\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        if (newAdmin == address(0)) {\n            revert ERC1967_NEW_ADMIN_IS_ZERO_ADDRESS();\n        }\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        if (!AddressUpgradeable.isContract(newBeacon)) {\n            revert ERC1967_NEW_BEACON_IS_NOT_CONTRACT();\n        }\n        if (!AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation())) {\n            revert ERC1967_BEACON_IMPL_IS_NOT_CONTRACT();\n        }\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        if (!AddressUpgradeable.isContract(target)) {\n            revert ADDRESS_DELEGATECALL_TO_NON_CONTRACT();\n        }\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/permissions/CreatorPermissionStorageV1.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// Imagine. Mint. Enjoy.\n/// @author @iainnash / @tbtstl\ncontract CreatorPermissionStorageV1 {\n    mapping(uint256 => mapping(address => uint256)) public permissions;\n\n    uint256[50] private __gap;\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/interfaces/ICreatorPermissionControl.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice Generic control interface for bit-based permissions-control\ninterface ICreatorPermissionControl {\n    /// @notice Emitted when permissions are updated\n    event UpdatedPermissions(uint256 indexed tokenId, address indexed user, uint256 indexed permissions);\n\n    /// @notice Public interface to get permissions given a token id and a user address\n    /// @return Returns raw permission bits\n    function getPermissions(uint256 tokenId, address user) external view returns (uint256);\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/renderer/CreatorRendererStorageV1.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {ICreatorRendererControl} from \"../interfaces/ICreatorRendererControl.sol\";\nimport {IRenderer1155} from \"../interfaces/IRenderer1155.sol\";\n\n/// @notice Creator Renderer Storage Configuration Contract V1\nabstract contract CreatorRendererStorageV1 is ICreatorRendererControl {\n    /// @notice Mapping for custom renderers\n    mapping(uint256 => IRenderer1155) public customRenderers;\n\n    uint256[50] private __gap;\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/royalties/CreatorRoyaltiesStorageV1.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {ICreatorRoyaltiesControl} from \"../interfaces/ICreatorRoyaltiesControl.sol\";\n\n/// Imagine. Mint. Enjoy.\n/// @title CreatorRoyaltiesControl\n/// @author ZORA @iainnash / @tbtstl\n/// @notice Royalty storage contract pattern\nabstract contract CreatorRoyaltiesStorageV1 is ICreatorRoyaltiesControl {\n    mapping(uint256 => RoyaltyConfiguration) public royalties;\n\n    uint256[50] private __gap;\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/interfaces/ILegacyNaming.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface ILegacyNaming {\n    function name() external returns (string memory);\n\n    function symbol() external returns (string memory);\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/legacy-naming/LegacyNamingStorageV1.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ncontract LegacyNamingStorageV1 {\n    string internal _name;\n\n    uint256[50] private __gap;\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/interfaces/IMintFeeManager.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface IMintFeeManager {\n    error MintFeeCannotBeMoreThanZeroPointOneETH(uint256 mintFeeBPS);\n    error CannotSendMintFee(address mintFeeRecipient, uint256 mintFee);\n    error CannotSetMintFeeToZeroAddress();\n\n    function mintFee() external view returns (uint256);\n\n    function mintFeeRecipient() external view returns (address);\n}\n"},"node_modules/@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/utils/ownable/IOwnable2StepUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @title IOwnable2StepUpgradeable\n/// @author Rohan Kulkarni\n/// @notice The external Ownable events, errors, and functions\ninterface IOwnable2StepUpgradeable {\n    ///                                                          ///\n    ///                            EVENTS                        ///\n    ///                                                          ///\n\n    /// @notice Emitted when ownership has been updated\n    /// @param prevOwner The previous owner address\n    /// @param newOwner The new owner address\n    event OwnerUpdated(address indexed prevOwner, address indexed newOwner);\n\n    /// @notice Emitted when an ownership transfer is pending\n    /// @param owner The current owner address\n    /// @param pendingOwner The pending new owner address\n    event OwnerPending(address indexed owner, address indexed pendingOwner);\n\n    /// @notice Emitted when a pending ownership transfer has been canceled\n    /// @param owner The current owner address\n    /// @param canceledOwner The canceled owner address\n    event OwnerCanceled(address indexed owner, address indexed canceledOwner);\n\n    ///                                                          ///\n    ///                            ERRORS                        ///\n    ///                                                          ///\n\n    /// @dev Reverts if an unauthorized user calls an owner function\n    error ONLY_OWNER();\n\n    /// @dev Reverts if an unauthorized user calls a pending owner function\n    error ONLY_PENDING_OWNER();\n\n    /// @dev Owner cannot be the zero/burn address\n    error OWNER_CANNOT_BE_ZERO_ADDRESS();\n\n    ///                                                          ///\n    ///                           FUNCTIONS                      ///\n    ///                                                          ///\n\n    /// @notice The address of the owner\n    function owner() external view returns (address);\n\n    /// @notice The address of the pending owner\n    function pendingOwner() external view returns (address);\n\n    /// @notice Forces an ownership transfer\n    /// @param newOwner The new owner address\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Initiates a two-step ownership transfer\n    /// @param newOwner The new owner address\n    function safeTransferOwnership(address newOwner) external;\n\n    /// @notice Accepts an ownership transfer\n    function acceptOwnership() external;\n\n    /// @notice Cancels a pending ownership transfer\n    function cancelOwnershipTransfer() external;\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/utils/ownable/IOwnable2StepStorageV1.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nabstract contract IOwnable2StepStorageV1 {\n    /// @dev The address of the owner\n    address internal _owner;\n\n    /// @dev The address of the pending owner\n    address internal _pendingOwner;\n\n    /// @dev storage gap\n    uint256[50] private __gap;\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/upgrades/FactoryManagedUpgradeGateStorageV1.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nabstract contract FactoryManagedUpgradeGateStorageV1 {\n    mapping(address => mapping(address => bool)) public isAllowedUpgrade;\n\n    uint256[50] private __gap;\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/_imagine/mint/Enjoy.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/*\n\n\n\n\n\n             ░░░░░░░░░░░░░░              \n        ░░▒▒░░░░░░░░░░░░░░░░░░░░        \n      ░░▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░      \n    ░░▒▒▒▒░░░░░░░░░░░░░░    ░░░░░░░░    \n   ░▓▓▒▒▒▒░░░░░░░░░░░░        ░░░░░░░    \n  ░▓▓▓▒▒▒▒░░░░░░░░░░░░        ░░░░░░░░  \n  ░▓▓▓▒▒▒▒░░░░░░░░░░░░░░    ░░░░░░░░░░  \n  ░▓▓▓▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░  \n  ░▓▓▓▓▓▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░  \n   ░▓▓▓▓▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░  \n    ░░▓▓▓▓▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░    \n    ░░▓▓▓▓▓▓▒▒▒▒▒▒▒▒░░░░░░░░░▒▒▒▒▒░░    \n      ░░▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░      \n          ░░▓▓▓▓▓▓▓▓▓▓▓▓▒▒░░░          \n\n               OURS TRULY,\n\n\n\n\n\n\n\n\n\n\n\n */\n\ninterface Enjoy {\n\n}\n"},"node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"},"node_modules/@zoralabs/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"node_modules/@zoralabs/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"node_modules/@zoralabs/zora-1155-contracts/src/interfaces/ICreatorRendererControl.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IRenderer1155} from \"./IRenderer1155.sol\";\n\n/// @notice Interface for creator renderer controls\ninterface ICreatorRendererControl {\n    /// @notice Get the custom renderer contract (if any) for the given token id\n    /// @dev Reverts if not custom renderer is set for this token\n    function getCustomRenderer(uint256 tokenId) external view returns (IRenderer1155 renderer);\n\n    error NoRendererForToken(uint256 tokenId);\n    error RendererNotValid(address renderer);\n    event RendererUpdated(uint256 indexed tokenId, address indexed renderer, address indexed user);\n}\n"},"node_modules/@openzeppelin/contracts/proxy/Proxy.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"},"node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"},"node_modules/@openzeppelin/contracts/proxy/beacon/IBeacon.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"node_modules/@openzeppelin/contracts/interfaces/IERC1967.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.9._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"},"node_modules/@openzeppelin/contracts/interfaces/draft-IERC1822.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"},"node_modules/@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"}},"settings":{"remappings":["@openzeppelin/=node_modules/@openzeppelin/","@zoralabs/=node_modules/@zoralabs/","_imagine/=node_modules/@zoralabs/zora-1155-contracts/_imagine/","ds-test/=node_modules/ds-test/src/","forge-std/=node_modules/forge-std/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"outputSelection":{"*":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]}},"evmVersion":"london","libraries":{}}}
